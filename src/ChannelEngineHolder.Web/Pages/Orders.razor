@page "/orders"
@using ChannelEngineHolder.Web.Data
@using ChannelEngineHolder.Web.Data.Models

@inject ChannelEngineApiService ApiService

<h1>IN_PROGRESS Orders</h1>

<p>In progress Orders from Channel Engine Rest Api</p>

@if (results?.Orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Channel Name</th>
                <th>Created</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in results.Orders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.ChannelName</td>
                    <td>@order.CreatedAt.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
}

<h1>Top 5 Products</h1>

<p>Top 5 Products ordered by Quantity</p>

@if (results?.Top5Products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Number</th>
                <th>Name</th>
                <th>Quantity</th>
                <th>Set Stock To 25</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in results.Top5Products)
            {
                <tr>
                    <td>@product.MerchantProductNo</td>
                    <td>@product.Name</td>
                    <td>@product.Quantity</td>
                    <td><button @onclick="@(e => UpdateStock(product.MerchantProductNo))"><i class="oi oi-check"></i></button></td>
                </tr>
            }
        </tbody>
    </table>

    @if (results?.UpdatedProduct != null)
    {
        <h4>Stock was Set up for Product: </h4>
        <p> Number: @results.UpdatedProduct.MerchantProductNo</p>
        <p> Name: @results.UpdatedProduct.Name</p>
        <p> Stock @results.UpdatedProduct.Stock</p>
    }
}


@code {
    private DisplayResults results;

    protected override async Task OnInitializedAsync()
    {
        results = await ApiService.GetResults();
    }



    private async Task UpdateStock(string number)
    {
      var result =  await ApiService.SetProductStock(number);
        results.UpdatedProduct = result;
    }

}